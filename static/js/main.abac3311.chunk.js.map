{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","src","Component","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImg","_this2","fetch","then","response","json","memes","data","console","log","setState","handleChange","bind","handleSubmit","event","_event$target","target","name","value","defineProperty","preventDefault","max","length","rand","Math","round","random","img","url","className","onSubmit","type","placeholder","onChange","App","components_Header","components_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAgBeA,0LAXX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,6DACTH,EAAAC,EAAAC,cAAA,oCANWE,qBC2ENC,cA1Eb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAU,GACVC,WAAa,GACbC,UAAY,gCACZC,WAAa,IANJX,mFAUM,IAAAY,EAAAT,KACjBU,MAAM,qCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACTE,EAASF,EAASG,KAAlBD,MACPE,QAAQC,IAAIH,EAAM,IAClBL,EAAKS,SAAS,CACZV,WAAaM,MAGjBd,KAAKmB,aAAenB,KAAKmB,aAAaC,KAAKpB,MAC3CA,KAAKqB,aAAerB,KAAKqB,aAAaD,KAAKpB,2CAGlCsB,GAAM,IAAAC,EACKD,EAAME,OAArBC,EADUF,EACVE,KAAMC,EADIH,EACJG,MACb1B,KAAKkB,SAALpB,OAAA6B,EAAA,EAAA7B,CAAA,GACG2B,EAAQC,yCAIAJ,GACXA,EAAMM,iBACN,IACMC,EAAM7B,KAAKI,MAAMI,WAAWsB,OAC5BC,EAFM,EAEOC,KAAKC,MAAMD,KAAKE,UAAYL,EAFnC,IAGNM,EAAMnC,KAAKI,MAAMI,WAAWuB,GAAMK,IACxCpB,QAAQC,IAAIkB,GACZnB,QAAQC,IAAIc,GACZ/B,KAAKkB,SAAS,CACZX,UAAY4B,qCAKd,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM4C,UAAU,YAAYC,SAAUtC,KAAKqB,cACzC9B,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLC,YAAY,WACZf,KAAK,UACLC,MAAO1B,KAAKI,MAAMC,QAClBoC,SAAUzC,KAAKmB,eAEjB5B,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLC,YAAY,cACZf,KAAK,aACLC,MAAO1B,KAAKI,MAAME,WAClBmC,SAAUzC,KAAKmB,eAEjB5B,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAK4C,UAAU,QACb9C,EAAAC,EAAAC,cAAA,OAAKC,IAAKM,KAAKI,MAAMG,YACrBhB,EAAAC,EAAAC,cAAA,MAAI4C,UAAU,OAAOrC,KAAKI,MAAMC,SAChCd,EAAAC,EAAAC,cAAA,MAAI4C,UAAU,UAAUrC,KAAKI,MAAME,qBApEjBX,aCiBX+C,cAdf,SAAAA,IAAc,OAAA5C,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA5C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,6EAMZ,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,cAVUjD,aCOEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.abac3311.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Header extends Component{\n  render(){\n    return(\n      <div>\n        <header>\n          <img src=\"https://pngimg.com/uploads/trollface/trollface_PNG48.png\"/>\n          <p>Meme Generator</p>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react'\n\n\nclass MemeGenerator extends Component{\n  constructor(){\n    super();\n    this.state = {\n      topText : \"\",\n      bottomText : \"\",\n      randomImg : 'http://i.imgflip.com/1bij.jpg',\n      allMemeImg : []\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const {memes} = response.data\n        console.log(memes[0])\n        this.setState({\n          allMemeImg : memes\n        })\n      })\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event){\n    const {name, value} = event.target;\n    this.setState({\n      [name] : value\n    })\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    const min = 0;\n    const max = this.state.allMemeImg.length;\n    const rand = min + Math.round(Math.random() * (max - min));\n    const img = this.state.allMemeImg[rand].url;\n    console.log(img);\n    console.log(rand);\n    this.setState({\n      randomImg : img\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Top text\"\n            name=\"topText\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Bottom text\"\n            name=\"bottomText\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          />\n          <button>Gen</button>\n        </form>\n        <div className=\"meme\">\n          <img src={this.state.randomImg}/>\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MemeGenerator;\n","import React,{ Component } from 'react';\nimport './styles.css';\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator'\n\nclass App extends Component{\n  constructor(){\n    super();\n  }\n\n\n  render(){\n    return (\n      <div>\n        <Header/>\n        <MemeGenerator/>\n      </div> );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}